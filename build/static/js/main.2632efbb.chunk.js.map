{"version":3,"sources":["aws-exports.js","App.js","ColorContext.js","serviceWorker.js","index.js"],"names":["awsmobile","aws_project_region","aws_cloud_logic_custom","name","endpoint","region","Amplify","configure","App","_useState","useState","_useState2","Object","slicedToArray","pictures","setPictures","_useState3","_useState4","color","setColor","fetchPictures","_x","_fetchPictures","apply","this","arguments","asyncToGenerator","regenerator_default","a","mark","_callee","count","response","wrap","_context","prev","next","API","post","body","number","sent","data","stop","useEffect","document","style","backgroundColor","react_default","createElement","Fragment","onClick","i","Math","floor","random","getRandomColor","className","map","el","idx","key","src","alt","title","renderPics","ColorContext","createContext","initialState","currentColor","reducer","state","action","type","objectSpread","payload","Consumer","Boolean","window","location","hostname","match","ReactDOM","render","props","_useReducer","useReducer","_useReducer2","value","dispatch","Provider","children","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sNAceA,EAZG,CACdC,mBAAsB,eACtBC,uBAA0B,CACtB,CACIC,KAAQ,WACRC,SAAY,uEACZC,OAAU,yBCHtBC,EAAQC,UAAUP,GAElB,IAyCeQ,EAzCH,WAAM,IAAAC,EACgBC,mBAAS,IADzBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACCI,EADDJ,EAAA,GAAAK,EAEUN,mBAAS,QAFnBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAETE,EAFSD,EAAA,GAEFE,EAFEF,EAAA,YAcDG,EAdCC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,WAAA,SAAAH,IAAA,OAAAA,EAAAV,OAAAc,EAAA,EAAAd,CAAAe,EAAAC,EAAAC,KAchB,SAAAC,EAA6BC,GAA7B,IAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACyBC,MAAIC,KAAK,WAAY,YAAa,CAAEC,KAAM,CAAEC,OAAQT,KAD7E,OACQC,EADRE,EAAAO,KAEE1B,EAAYiB,EAASU,MAFvB,wBAAAR,EAAAS,SAAAb,OAdgBP,MAAAC,KAAAC,WAIhBmB,oBAAU,WACRxB,EAAc,KACb,IAIHwB,oBAAU,WACRC,SAASN,KAAKO,MAAMC,gBAAkB7B,IAoBxC,OAAO8B,EAAApB,EAAAqB,cAAAD,EAAApB,EAAAsB,SAAA,KACLF,EAAApB,EAAAqB,cAAA,sCACAD,EAAApB,EAAAqB,cAAA,UAAQE,QAAS,kBAAMhC,EAXF,WAGrB,IAFA,IACID,EAAQ,IACHkC,EAAI,EAAGA,EAAI,EAAGA,IACrBlC,GAHY,mBAGKmC,KAAKC,MAAsB,GAAhBD,KAAKE,WAEnC,OAAOrC,EAKyBsC,MAAhC,qBACAR,EAAApB,EAAAqB,cAAA,UAAQE,QAAS,kBAAM/B,EAAc,MAArC,cACA4B,EAAApB,EAAAqB,cAAA,OAAKQ,UAAU,oBAhBE,SAAC3C,GAAD,OAAeA,GAAYA,EAAS4C,IAAI,SAACC,EAAIC,GAAL,OACzDZ,EAAApB,EAAAqB,cAAA,OAAKY,IAAKD,GAAKZ,EAAApB,EAAAqB,cAAA,OAAKa,IAAKH,EAAII,IAAI,QAAQC,MAAM,aAgB5CC,CAAWnD,cCzCZoD,EAAeC,0BACfC,EAAe,CACnBC,aAAc,SAGVC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,QACH,OAAOL,EACT,IAAK,YACH,OAAOxD,OAAA8D,EAAA,EAAA9D,CAAA,GAAK2D,EAAZ,CAAmBF,aAAcG,EAAOG,UAC1C,QACE,OAAOP,IAagBF,EAAaU,SCftBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACPnC,EAAApB,EAAAqB,cFSF,SAA8BmC,GAAO,IAAAC,EACTC,qBAAWhB,EAASF,GADXmB,EAAA3E,OAAAC,EAAA,EAAAD,CAAAyE,EAAA,GAE7BG,EAAQ,CAAEjB,MAFmBgB,EAAA,GAEZE,SAFYF,EAAA,IAInC,OACEvC,EAAApB,EAAAqB,cAACiB,EAAawB,SAAd,CAAuBF,MAAOA,GAAQJ,EAAMO,WEd9C,KACE3C,EAAApB,EAAAqB,cAAC2C,EAAD,OACuB/C,SAASgD,eAAe,SDsH7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2632efbb.chunk.js","sourcesContent":["// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"eu-central-1\",\n    \"aws_cloud_logic_custom\": [\n        {\n            \"name\": \"shibaapi\",\n            \"endpoint\": \"https://1ybh6nh6ab.execute-api.eu-central-1.amazonaws.com/serverless\",\n            \"region\": \"eu-central-1\"\n        }\n    ]\n};\n\n\nexport default awsmobile;\n","import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport Amplify, { API } from 'aws-amplify';\r\nimport awsmobile from './aws-exports';\r\n\r\nAmplify.configure(awsmobile);\r\n\r\nconst App = () => {\r\n  const [pictures, setPictures] = useState([]);\r\n  const [color, setColor] = useState('#DDD');\r\n\r\n  useEffect(() => {\r\n    fetchPictures(10);\r\n  }, []);\r\n\r\n\r\n  // Separate effects for achieving Separation of Concerns\r\n  useEffect(() => {\r\n    document.body.style.backgroundColor = color;\r\n  });\r\n\r\n  async function fetchPictures(count) {\r\n    const response = await API.post('shibaapi', '/pictures', { body: { number: count } });\r\n    setPictures(response.data);\r\n  }\r\n\r\n  const renderPics = (pictures) => (pictures && pictures.map((el, idx) => (\r\n    <div key={idx}><img src={el} alt='Shibe' title='Shibe' /></div>)));\r\n\r\n  const getRandomColor = () => {\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n\r\n  return <>\r\n    <h2>useState() & useEffect()</h2>\r\n    <button onClick={() => setColor(getRandomColor())}>Change Background</button>\r\n    <button onClick={() => fetchPictures(10)}>Fetch More</button>\r\n    <div className='images-container'>\r\n      {renderPics(pictures)}\r\n    </div>\r\n  </>\r\n};\r\n\r\nexport default App;\r\n","import React, { useReducer, createContext } from \"react\";\r\n\r\nconst ColorContext = createContext();\r\nconst initialState = {\r\n  currentColor: \"beige\"\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"RESET\":\r\n      return initialState;\r\n    case \"SET-COLOR\":\r\n      return { ...state, currentColor: action.payload };\r\n    default:\r\n      return initialState;\r\n  }\r\n};\r\n\r\nfunction ColorContextProvider(props) {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const value = { state, dispatch };\r\n\r\n  return (\r\n    <ColorContext.Provider value={value}>{props.children}</ColorContext.Provider>\r\n  );\r\n}\r\n\r\nconst ColorContextConsumer = ColorContext.Consumer;\r\n\r\nexport { ColorContext, ColorContextProvider, ColorContextConsumer };","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { ColorContextProvider } from \"./ColorContext\";\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <ColorContextProvider>\r\n    <App />\r\n  </ColorContextProvider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}